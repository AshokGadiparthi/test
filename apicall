package com.viveknaskar;

import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.TextIO;
import org.apache.beam.sdk.io.redis.RedisConnectionConfiguration;
import org.apache.beam.sdk.io.redis.RedisIO;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.KV;
import org.apache.beam.sdk.values.PCollection;

public class SimplePipeline {

    public static void main(String[] args) {
        // Define pipeline options
        PipelineOptionsFactory.register(PipelineOptions.class);
        StorageToRedisOptions options = PipelineOptionsFactory.fromArgs(args)
                .withValidation()
                .as(StorageToRedisOptions.class);

        // Create a Pipeline
        Pipeline p = Pipeline.create(options);

        // Read data from CSV file
        PCollection<String> lines = p.apply(
                "ReadLines", TextIO.read().from(options.getInputFile()));

        // Process each line and create key-value pairs for Redis
        PCollection<KV<String, String>> kvPairs = lines.apply("ParseCSV", ParDo.of(new DoFn<String, KV<String, String>>() {
            @ProcessElement
            public void processElement(ProcessContext c) {
                String[] fields = c.element().split(",");
                if (fields.length == 3) { // Assuming the CSV has 3 fields
                    String clientId = fields[0];
                    String name = fields[1];
                    String address = fields[2];
                    c.output(KV.of(clientId, name + "," + address));
                }
            }
        }));

        // Write data to Redis
        kvPairs.apply("WriteToRedis", RedisIO.write()
                .withMethod(RedisIO.Write.Method.SET) // Use SET command to store the key-value pair
                .withConnectionConfiguration(RedisConnectionConfiguration.create(options.getRedisHost(), options.getRedisPort())));

        // Run the pipeline
        p.run().waitUntilFinish();
    }
}

