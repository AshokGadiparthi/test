import com.google.api.services.bigquery.model.TableRow;
import com.google.cloud.bigquery.*;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO;
import org.apache.beam.sdk.io.gcp.pubsub.PubsubIO;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.transforms.PTransform;
import org.apache.beam.sdk.values.PCollection;
import org.apache.beam.sdk.values.PDone;
import org.json.JSONObject;

public class PubSubToBigQuery {
    public static void main(String[] args) {
        PipelineOptionsFactory.register(Options.class);
        Options options = PipelineOptionsFactory.fromArgs(args).withValidation().as(Options.class);
        Pipeline pipeline = Pipeline.create(options);

        String pubSubSubscription = "projects/your-project/subscriptions/your-subscription";
        String bigQueryTableSpec = "your-project:your_dataset.your_table";

        pipeline
            .apply("ReadMessages", PubsubIO.readStrings().fromSubscription(pubSubSubscription))
            .apply("ProcessMessages", ParDo.of(new ProcessMessageFn()))
            .apply("WriteToBigQuery", BigQueryIO.writeTableRows()
                .to(bigQueryTableSpec)
                .withCreateDisposition(BigQueryIO.Write.CreateDisposition.CREATE_IF_NEEDED)
                .withWriteDisposition(BigQueryIO.Write.WriteDisposition.WRITE_APPEND)
                .withSchema(getSchema()));

        pipeline.run().waitUntilFinish();
    }

    public interface Options extends DataflowPipelineOptions {
    }

    static class ProcessMessageFn extends DoFn<String, TableRow> {
        @ProcessElement
        public void processElement(@Element String message, OutputReceiver<TableRow> receiver) {
            JSONObject json = new JSONObject(message);
            TableRow row = new TableRow()
                .set("customer_id", json.getInt("customer_id"))
                .set("customer_name", json.getString("customer_name"))
                .set("gender", json.getString("gender"))
                .set("age", json.getInt("age"))
                .set("home_address", json.getString("home_address"))
                .set("zip_code", json.getInt("zip_code"))
                .set("city", json.getString("city"))
                .set("state", json.getString("state"))
                .set("country", json.getString("country"));
            receiver.output(row);
        }
    }

    private static TableSchema getSchema() {
        return new TableSchema().setFields(
            ImmutableList.of(
                new TableFieldSchema().setName("customer_id").setType("INTEGER"),
                new TableFieldSchema().setName("customer_name").setType("STRING"),
                new TableFieldSchema().setName("gender").setType("STRING"),
                new TableFieldSchema().setName("age").setType("INTEGER"),
                new TableFieldSchema().setName("home_address").setType("STRING"),
                new TableFieldSchema().setName("zip_code").setType("INTEGER"),
                new TableFieldSchema().setName("city").setType("STRING"),
                new TableFieldSchema().setName("state").setType("STRING"),
                new TableFieldSchema().setName("country").setType("STRING")
            )
        );
    }
}
