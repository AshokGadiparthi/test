dbClient.readWriteTransaction().run(transaction -> {
    SpannerLookupUtil lookupUtil = new SpannerLookupUtil(dbClient);
    
    // ✅ Local cache to avoid redundant lookups in the same batch
    Map<String, SpannerLookupUtil.LookupResult> lookupCache = new HashMap<>();

    for (TransactionMessage msg : sortedMessages) {
        SpannerLookupUtil.LookupResult lookupResult = null;
        String businessKey = "";

        // ✅ Determine the appropriate lookup based on entity type
        switch (msg.getEntityType()) {
            case "bl_account":
                businessKey = msg.getCustId() + "_" + msg.getAcctNo();
                lookupResult = lookupCache.computeIfAbsent(businessKey,
                    key -> lookupUtil.lookupCustAccount(msg.getCustId(), msg.getAcctNo()));
                break;

            case "order_line":
            case "pplan":
                businessKey = msg.getCustId() + "_" + msg.getMtn();
                lookupResult = lookupCache.computeIfAbsent(businessKey,
                    key -> lookupUtil.lookupCustLineAcct(msg.getCustId(), msg.getMtn()));
                break;

            case "cust_acct_mtn":
                businessKey = msg.getCustId() + "_" + msg.getAcctNo() + "_" + msg.getMtn();
                lookupResult = lookupCache.computeIfAbsent(businessKey,
                    key -> lookupUtil.lookupCustAcctMtn(msg.getCustId(), msg.getAcctNo(), msg.getMtn()));
                break;

            case "profile":
                // Profile requires checking both `cust_account` and `cust_line_acct`
                String accountKey = msg.getCustId() + "_" + msg.getAcctNo();
                String lineKey = msg.getCustId() + "_" + msg.getMtn();

                SpannerLookupUtil.LookupResult accountLookup = lookupCache.computeIfAbsent(accountKey,
                    key -> lookupUtil.lookupCustAccount(msg.getCustId(), msg.getAcctNo()));

                SpannerLookupUtil.LookupResult lineLookup = lookupCache.computeIfAbsent(lineKey,
                    key -> lookupUtil.lookupCustLineAcct(msg.getCustId(), msg.getMtn()));

                // Choose the UUID from either query
                if (accountLookup.uuid != null) {
                    lookupResult = accountLookup;
                } else {
                    lookupResult = lineLookup;
                }
                break;
        }

        // ✅ If no UUID found, generate a new one
        boolean isNewRecord = (lookupResult.uuid == null);
        String finalUUID = isNewRecord ? UUID.randomUUID().toString() : lookupResult.uuid;
        Timestamp insertTs = isNewRecord ? Timestamp.now() : lookupResult.insertTs;
        Timestamp updateTs = Timestamp.now();

        // ✅ Build mutation
        Mutation.WriteBuilder mutationBuilder = Mutation.newInsertOrUpdateBuilder(msg.getTableName())
            .set("cust_id").to(msg.getCustId())
            .set("payload").to(msg.getPayload())
            .set("UUID").to(finalUUID)
            .set("ops_ts").to(Timestamp.now());

        if (isNewRecord) {
            mutationBuilder.set("insert_ts").to(insertTs);
        } else {
            mutationBuilder.set("update_ts").to updateTs);
        }

        transaction.buffer(mutationBuilder.build());
    }

    return null; // ✅ Commit transaction
});
