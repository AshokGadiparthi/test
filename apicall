import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.Transaction;
import com.google.api.services.bigquery.model.TableRow;
import java.util.HashSet;
import java.util.Set;

public class SafeSyncBigQueryToRedisSet {

    private static final String REDIS_HOST = "your-redis-host";  // Replace with actual Redis host
    private static final int REDIS_PORT = 6379;
    private static final String REDIS_SET_KEY = "sectables_set";        // Active set used by streaming Dataflow
    private static final String REDIS_TEMP_SET_KEY = "sectables_set_tmp";  // Temporary staging set

    /**
     * Step 1: Read all `ref_col` values from BigQuery and safely replace the Redis Set using `RENAME`.
     */
    static class ReplaceRedisSetSafelyFn extends DoFn<TableRow, Void> {
        private transient Jedis jedis;
        private Set<String> newSet = new HashSet<>();  // Store new BigQuery values

        @Setup
        public void setup() {
            jedis = new Jedis(REDIS_HOST, REDIS_PORT);
        }

        @ProcessElement
        public void processElement(ProcessContext c) {
            String refColValue = (String) c.element().get("ref_col");
            if (refColValue != null) {
                newSet.add(refColValue);  // Collect all BigQuery values
            }
        }

        @FinishBundle
        public void finishBundle() {
            System.out.println("ðŸ“Œ Replacing Redis Set SAFELY with " + newSet.size() + " values");

            // Use Redis Transaction (MULTI) to ensure a safe atomic update
            Transaction transaction = jedis.multi();
            
            // Step 1: Delete old temp set
            transaction.del(REDIS_TEMP_SET_KEY);

            // Step 2: Add new values into temp set
            if (!newSet.isEmpty()) {
                transaction.sadd(REDIS_TEMP_SET_KEY, newSet.toArray(new String[0]));
            }

            // Step 3: Atomically rename temp set to active set
            transaction.rename(REDIS_TEMP_SET_KEY, REDIS_SET_KEY);

            // Step 4: Execute transaction
            transaction.exec();

            // Log the final count of Redis Set
            long totalCount = jedis.scard(REDIS_SET_KEY);
            System.out.println("âœ… Redis Set Updated SAFELY. New count: " + totalCount);
            
            // Fetch 5 sample values for debugging
            Set<String> sampleValues = jedis.srandmember(REDIS_SET_KEY, 5);
            System.out.println("ðŸ“Œ Sample Records from Redis: " + sampleValues);
        }

        @Teardown
        public void teardown() {
            jedis.close();
        }
    }

    public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).withValidation().create();
        Pipeline pipeline = Pipeline.create(options);

        // Step 1: Read latest BigQuery `ref_col` values
        PCollection<TableRow> bigQueryData = pipeline.apply("ReadFromBigQuery",
                BigQueryIO.readTableRows().from("your_project.your_dataset.employee"));

        // Step 2: Safely Replace Redis Set with new values
        bigQueryData.apply("ReplaceRedisSetSafely", ParDo.of(new ReplaceRedisSetSafelyFn()));

        pipeline.run().waitUntilFinish();
    }
}
