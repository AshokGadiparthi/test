import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.hash.Hashing;

import java.nio.charset.StandardCharsets;

public class JsonChangeDetector {

    private static final ObjectMapper mapper = new ObjectMapper();

    public static boolean isPayloadChanged(String jsonPayload) {
        try {
            JsonNode root = mapper.readTree(jsonPayload);
            JsonNode before = root.path("before");
            JsonNode after = root.path("after");

            // Convert entire sections to canonical string representations
            String beforeStr = before.isMissingNode() || before.isNull() ? "" : mapper.writeValueAsString(before);
            String afterStr = after.isMissingNode() || after.isNull() ? "" : mapper.writeValueAsString(after);

            // Generate fingerprints (same as FARM_FINGERPRINT)
            long beforeHash = Hashing.farmHashFingerprint64()
                                     .hashString(beforeStr, StandardCharsets.UTF_8)
                                     .asLong();

            long afterHash = Hashing.farmHashFingerprint64()
                                    .hashString(afterStr, StandardCharsets.UTF_8)
                                    .asLong();

            // Return true if the content has changed
            return beforeHash != afterHash;

        } catch (Exception e) {
            throw new RuntimeException("Failed to compare payload: " + e.getMessage(), e);
        }
    }
}
