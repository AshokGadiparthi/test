import com.google.api.services.bigquery.model.TableRow;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;
import org.apache.beam.sdk.options.PipelineOptionsFactory;

public class BigQueryInsertExample {

    public static class ConvertToTableRowFn extends DoFn<Employee, TableRow> {
        @ProcessElement
        public void processElement(ProcessContext c) {
            Employee employee = c.element();
            
            // Creating a nested struct for address
            TableRow addressRow = new TableRow()
                .set("street", employee.getAddress().getStreet())
                .set("city", employee.getAddress().getCity())
                .set("zipcode", employee.getAddress().getZipcode());
            
            // Creating the main TableRow for employee
            TableRow row = new TableRow()
                .set("empName", employee.getEmpName())
                .set("address", addressRow)  // Nested struct (address)
                .set("phoneNumber", employee.getPhoneNumber());
            
            c.output(row);
        }
    }

    public static void main(String[] args) {
        PipelineOptionsFactory.register(MyPipelineOptions.class);
        MyPipelineOptions options = PipelineOptionsFactory.fromArgs(args).withValidation().as(MyPipelineOptions.class);
        Pipeline pipeline = Pipeline.create(options);

        // Assuming Employee objects are coming from some source
        PCollection<Employee> employees = pipeline.apply(/* Your source here */);

        // Convert Employee objects to BigQuery TableRow
        PCollection<TableRow> tableRows = employees.apply(ParDo.of(new ConvertToTableRowFn()));

        // Write the data to BigQuery
        tableRows.apply(BigQueryIO.writeTableRows()
            .to("your-project-id:your_dataset.your_table")
            .withSchema(/* Provide your table schema here */)
            .withWriteDisposition(BigQueryIO.Write.WriteDisposition.WRITE_APPEND)
            .withCreateDisposition(BigQueryIO.Write.CreateDisposition.CREATE_NEVER));  // Adjust if table needs to be created

        pipeline.run().waitUntilFinish();
    }
}

// Employee class to model your data
public class Employee {
    private String empName;
    private Address address;
    private String phoneNumber;

    // Getters and setters
    public String getEmpName() { return empName; }
    public void setEmpName(String empName) { this.empName = empName; }

    public Address getAddress() { return address; }
    public void setAddress(Address address) { this.address = address; }

    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
}

// Address class to represent the nested struct
public class Address {
    private String street;
    private String city;
    private String zipcode;

    // Getters and setters
    public String getStreet() { return street; }
    public void setStreet(String street) { this.street = street; }

    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }

    public String getZipcode() { return zipcode; }
    public void setZipcode(String zipcode) { this.zipcode = zipcode; }
}


[
    {
        "name": "empName",
        "type": "STRING",
        "mode": "REQUIRED"
    },
    {
        "name": "address",
        "type": "RECORD",
        "mode": "REQUIRED",
        "fields": [
            {
                "name": "street",
                "type": "STRING",
                "mode": "REQUIRED"
            },
            {
                "name": "city",
                "type": "STRING",
                "mode": "REQUIRED"
            },
            {
                "name": "zipcode",
                "type": "STRING",
                "mode": "REQUIRED"
            }
        ]
    },
    {
        "name": "phoneNumber",
        "type": "STRING",
        "mode": "REQUIRED"
    }
]

