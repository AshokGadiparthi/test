import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.Compression;
import org.apache.beam.sdk.io.TextIO;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;
import redis.clients.jedis.Jedis;

import java.io.IOException;

public class GCSJsonToRedis {

    public static void main(String[] args) {
        Pipeline pipeline = Pipeline.create(PipelineOptionsFactory.create());

        // Redis connection details
        String redisHost = "your-redis-host";
        int redisPort = 6379;
        String redisPassword = "your-redis-password";

        // GCS path to read the gzipped JSON files
        String gcsPath = "gs://your-bucket/your-file.json.gz";

        // Read the gzipped JSON file from GCS
        PCollection<String> jsonLines = pipeline.apply("Read JSON from GCS", 
            TextIO.read().from(gcsPath).withCompression(Compression.GZIP));

        // Process each line in the JSON file
        jsonLines.apply("Process JSON and Insert into Redis", ParDo.of(new DoFn<String, Void>() {
            @ProcessElement
            public void processElement(ProcessContext c) {
                String jsonLine = c.element();
                try {
                    ObjectMapper mapper = new ObjectMapper();
                    JsonNode jsonNode = mapper.readTree(jsonLine);

                    // Extract attributes to form the key
                    String attr1 = jsonNode.get("attr1").asText();
                    String attr2 = jsonNode.get("attr2").asText();
                    String attr3 = jsonNode.get("attr3").asText();

                    String redisKey = attr1 + ":" + attr2 + ":" + attr3;

                    // Redis connection
                    try (Jedis jedis = new Jedis(redisHost, redisPort)) {
                        jedis.auth(redisPassword);

                        // Check if the key exists in Redis
                        if (!jedis.exists(redisKey)) {
                            // Convert the whole JSON object to string and store in Redis
                            jedis.set(redisKey, jsonLine);
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }));

        pipeline.run().waitUntilFinish();
    }
}
