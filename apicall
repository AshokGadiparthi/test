import com.google.gson.Gson;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.Compression;
import org.apache.beam.sdk.io.TextIO;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.Pipeline;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class GCSJsonToRedisWithJedisPipeline {

    public static void main(String[] args) {
        // Step 1: Define Pipeline Options
        PipelineOptions options = PipelineOptionsFactory.create();
        Pipeline p = Pipeline.create(options);

        // Step 2: Read .gz JSON files and extract JSON content
        String inputPattern = "gs://your-bucket/your-path-to-gz-files/*.gz";
        PCollection<String> jsonLines = p.apply(TextIO.read().from(inputPattern).withCompression(Compression.GZIP));

        // Step 3: Parse JSON content and store it in Redis
        jsonLines.apply("ParseAndStoreInRedis", ParDo.of(new ParseAndStoreInRedis()));

        // Step 4: Run the pipeline
        p.run().waitUntilFinish();
    }

    static class ParseAndStoreInRedis extends DoFn<String, Void> {
        private transient JedisPool jedisPool;
        private static final int BATCH_SIZE = 500; // Batch size for Redis operations
        private List<Map<String, String>> batchList = new ArrayList<>();

        @Setup
        public void setup() {
            // Step 5: Configure Jedis pool for Redis connection
            JedisPoolConfig poolConfig = new JedisPoolConfig();
            poolConfig.setMaxTotal(128); // Adjust pool settings as needed
            poolConfig.setMaxIdle(128);
            poolConfig.setMinIdle(16);
            poolConfig.setTestOnBorrow(true);
            poolConfig.setTestOnReturn(true);
            poolConfig.setTestWhileIdle(true);

            String redisHost = "your-redis-host";
            int redisPort = 6379;
            String redisAuth = "your-redis-auth-string";
            jedisPool = new JedisPool(poolConfig, redisHost, redisPort, 2000, redisAuth);
        }

        @ProcessElement
        public void processElement(@Element String jsonLine, OutputReceiver<Void> receiver) {
            // Step 6: Parse JSON line into a Map
            Map<String, String> jsonMap = new Gson().fromJson(jsonLine, Map.class);
            batchList.add(jsonMap);

            // Step 7: Check if the batch size has been reached
            if (batchList.size() >= BATCH_SIZE) {
                flushBatch();
            }
        }

        // Step 8: Flush the batch to Redis
        private void flushBatch() {
            try (Jedis jedis = jedisPool.getResource()) {
                Pipeline pipeline = jedis.pipelined();

                for (Map<String, String> jsonMap : batchList) {
                    String key = String.format("%s:%s:%s", 
                                               jsonMap.getOrDefault("cust_id", ""), 
                                               jsonMap.getOrDefault("acct_num", ""), 
                                               jsonMap.getOrDefault("mtn", ""));

                    if (jsonMap.get("cust_line_seq_id") != null && !jsonMap.get("cust_line_seq_id").isEmpty()) {
                        pipeline.hset(key, "cust_line_seq_id", jsonMap.get("cust_line_seq_id"));
                    }
                    if (jsonMap.get("crm_cust_line_hash") != null && !jsonMap.get("crm_cust_line_hash").isEmpty()) {
                        pipeline.hset(key, "crm_cust_line_hash", jsonMap.get("crm_cust_line_hash"));
                    }
                    if (jsonMap.get("omni_cust_hash") != null && !jsonMap.get("omni_cust_hash").isEmpty()) {
                        pipeline.hset(key, "omni_cust_hash", jsonMap.get("omni_cust_hash"));
                    }
                    if (jsonMap.get("moni_mtn_hash") != null && !jsonMap.get("moni_mtn_hash").isEmpty()) {
                        pipeline.hset(key, "moni_mtn_hash", jsonMap.get("moni_mtn_hash"));
                    }
                    if (jsonMap.get("process_dt") != null && !jsonMap.get("process_dt").isEmpty()) {
                        pipeline.hset(key, "process_dt", jsonMap.get("process_dt"));
                    }
                }

                pipeline.sync(); // Execute the batched commands
                batchList.clear(); // Clear the batch after processing
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        @FinishBundle
        public void finishBundle() {
            // Step 9: Ensure any remaining data in the batch is flushed to Redis
            if (!batchList.isEmpty()) {
                flushBatch();
            }
        }

        @Teardown
        public void teardown() {
            if (jedisPool != null) {
                jedisPool.close();
            }
        }
    }
}
