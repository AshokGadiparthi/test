import apache_beam as beam
import redis

class RedisReadFn(beam.DoFn):
    def __init__(self, redis_host, redis_port, redis_password):
        self.redis_host = redis_host
        self.redis_port = redis_port
        self.redis_password = redis_password

    def setup(self):
        # Create a Redis client
        self.redis_client = redis.StrictRedis(
            host=self.redis_host,
            port=self.redis_port,
            password=self.redis_password,
            ssl=True,
            decode_responses=True
        )

    def process(self, element):
        # Example operation: get a value from Redis
        key = element
        value = self.redis_client.get(key)
        yield (key, value)

def run_pipeline():
    # Configuration for Redis
    redis_host = 'your-redis-host'
    redis_port = 6379
    redis_password = 'your-redis-auth-string'

    # Create a Beam pipeline
    with beam.Pipeline(runner='DirectRunner') as p:
        # Example input data (keys to retrieve from Redis)
        keys = p | 'CreateKeys' >> beam.Create(['key1', 'key2'])

        # Read from Redis
        redis_results = (
            keys
            | 'ReadFromRedis' >> beam.ParDo(RedisReadFn(redis_host, redis_port, redis_password))
        )

        # Print results
        redis_results | 'PrintResults' >> beam.Map(lambda x: print(f"Key: {x[0]}, Value: {x[1]}"))

if __name__ == '__main__':
    run_pipeline()
