dbClient.readWriteTransaction().run(transaction -> {
    SpannerLookupUtil lookupUtil = new SpannerLookupUtil(dbClient);

    // ✅ Local cache for lookups (businessKey → LookupResult)
    Map<String, SpannerLookupUtil.LookupResult> lookupCache = new HashMap<>();

    // ✅ Store multiple messages per business key
    Map<String, List<TransactionMessage>> messageCache = new HashMap<>();

    // ✅ First Loop: Perform all lookups and store results
    for (TransactionMessage msg : sortedMessages) {
        String businessKey = "";
        SpannerLookupUtil.LookupResult lookupResult = null;

        switch (msg.getEntityType()) {
            case "bl_account":
                businessKey = msg.getCustId() + "_" + msg.getAcctNo();
                lookupResult = lookupCache.computeIfAbsent(businessKey,
                    key -> lookupUtil.lookupCustAccount(msg.getCustId(), msg.getAcctNo()));
                break;

            case "order_line":
            case "pplan":
                businessKey = msg.getCustId() + "_" + msg.getMtn();
                lookupResult = lookupCache.computeIfAbsent(businessKey,
                    key -> lookupUtil.lookupCustLineAcct(msg.getCustId(), msg.getMtn()));
                break;

            case "cust_acct_mtn":
                businessKey = msg.getCustId() + "_" + msg.getAcctNo() + "_" + msg.getMtn();
                lookupResult = lookupCache.computeIfAbsent(businessKey,
                    key -> lookupUtil.lookupCustAcctMtn(msg.getCustId(), msg.getAcctNo(), msg.getMtn()));
                break;

            case "profile":
                // Profile requires checking both `cust_account` and `cust_line_acct`
                String accountKey = msg.getCustId() + "_" + msg.getAcctNo();
                String lineKey = msg.getCustId() + "_" + msg.getMtn();

                SpannerLookupUtil.LookupResult accountLookup = lookupCache.computeIfAbsent(accountKey,
                    key -> lookupUtil.lookupCustAccount(msg.getCustId(), msg.getAcctNo()));

                SpannerLookupUtil.LookupResult lineLookup = lookupCache.computeIfAbsent(lineKey,
                    key -> lookupUtil.lookupCustLineAcct(msg.getCustId(), msg.getMtn()));

                // Choose the UUID from either query
                lookupResult = (accountLookup.uuid != null) ? accountLookup : lineLookup;
                break;
        }

        // ✅ Store messages in a list per businessKey
        messageCache.computeIfAbsent(businessKey, key -> new ArrayList<>()).add(msg);
    }

    // ✅ Second Loop: Process mutations for all stored messages
    for (Map.Entry<String, List<TransactionMessage>> entry : messageCache.entrySet()) {
        String businessKey = entry.getKey();
        List<TransactionMessage> messages = entry.getValue();
        SpannerLookupUtil.LookupResult lookupResult = lookupCache.get(businessKey);

        boolean isNewRecord = (lookupResult == null || lookupResult.uuid == null);
        String finalUUID = isNewRecord ? UUID.randomUUID().toString() : lookupResult.uuid;
        Timestamp insertTs = isNewRecord ? Timestamp.now() : lookupResult.insertTs;
        Timestamp updateTs = Timestamp.now();

        // ✅ Process each message in the group
        boolean firstRecord = true;
        for (TransactionMessage msg : messages) {
            // ✅ Start building mutation (common fields)
            Mutation.WriteBuilder mutationBuilder = Mutation.newInsertOrUpdateBuilder(msg.getTableName())
                .set("cust_id").to(msg.getCustId())
                .set("payload").to(msg.getPayload())
                .set("UUID").to(finalUUID)
                .set("ops_ts").to(Timestamp.now());

            // ✅ Apply `insert_ts` only for the first record
            if (firstRecord) {
                mutationBuilder.set("insert_ts").to(insertTs);
                firstRecord = false;
            } else {
                mutationBuilder.set("update_ts").to(updateTs);
            }

            // ✅ Entity-specific field handling
            switch (msg.getEntityType()) {
                case "bl_account":
                    mutationBuilder.set("acct_no").to(msg.getAcctNo());
                    break;

                case "order_line":
                case "pplan":
                    mutationBuilder.set("mtn").to(msg.getMtn());
                    break;

                case "cust_acct_mtn":
                    mutationBuilder.set("acct_no").to(msg.getAcctNo());
                    mutationBuilder.set("mtn").to(msg.getMtn());
                    break;

                case "profile":
                    mutationBuilder.set("acct_no").to(msg.getAcctNo());
                    mutationBuilder.set("mtn").to(msg.getMtn());
                    break;
            }

            // ✅ Add the mutation to the transaction buffer
            transaction.buffer(mutationBuilder.build());
        }
    }

    return null; // ✅ Commits all changes at once
});
