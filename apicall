from google.cloud import secretmanager
import base64
import os
import ssl
import tempfile

def access_secret_version(project_id, secret_id, version_id="latest"):
    """
    Access the secret version from Google Cloud Secret Manager.

    Args:
    project_id (str): The ID of your Google Cloud project.
    secret_id (str): The ID of the secret in Secret Manager.
    version_id (str): The version of the secret to access, defaults to 'latest'.

    Returns:
    str: The secret payload.
    """
    # Create the Secret Manager client.
    client = secretmanager.SecretManagerServiceClient()

    # Build the resource name of the secret version.
    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"

    # Access the secret version.
    response = client.access_secret_version(name=name)

    # Return the decoded payload.
    return response.payload.data.decode("UTF-8")

def save_jks_to_temp_file(jks_base64):
    """
    Save the JKS file from its base64 representation to a temporary file.

    Args:
    jks_base64 (str): The base64-encoded JKS file.

    Returns:
    str: The path to the temporary JKS file.
    """
    jks_data = base64.b64decode(jks_base64)
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jks")
    with open(temp_file.name, "wb") as file:
        file.write(jks_data)
    return temp_file.name

def test_keystore(jks_path, jks_password):
    """
    Test loading the keystore to ensure it can be read without errors.

    Args:
    jks_path (str): The path to the JKS file.
    jks_password (str): The password for the JKS file.
    """
    try:
        # Load the JKS file into an SSL context
        ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
        ssl_context.load_cert_chain(certfile=jks_path, password=jks_password)
        print("Keystore loaded successfully.")
    except Exception as e:
        print(f"Error loading keystore: {e}")

def main():
    project_id = "your-project-id"
    jks_secret_id = "your-jks-secret-id"
    password_secret_id = "your-password-secret-id"

    try:
        # Access the JKS file (assumed to be base64-encoded).
        jks_base64 = access_secret_version(project_id, jks_secret_id)
        
        # Access the JKS password.
        jks_password = access_secret_version(project_id, password_secret_id)

        # Save the JKS file to a temporary location.
        jks_path = save_jks_to_temp_file(jks_base64)
        print(f"JKS file saved to {jks_path}")

        # Test loading the keystore.
        test_keystore(jks_path, jks_password)

        # Clean up the temporary file after testing
        os.remove(jks_path)

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
