import com.google.cloud.spanner.*;
import com.google.cloud.bigquery.*;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO;
import org.apache.beam.sdk.io.gcp.spanner.SpannerIO;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.options.Description;
import org.apache.beam.sdk.options.Default;
import org.apache.beam.sdk.transforms.*;
import org.apache.beam.sdk.values.PCollection;
import org.apache.beam.sdk.values.PDone;
import org.apache.beam.sdk.values.Row;

import java.util.HashMap;
import java.util.Map;

public class SpannerToBigQuery {
    public interface SpannerToBigQueryOptions extends PipelineOptions {
        @Description("Google Cloud project ID")
        @Default.String("your-gcp-project")
        String getProject();
        void setProject(String value);

        @Description("Spanner instance ID")
        @Default.String("your-spanner-instance")
        String getSpannerInstance();
        void setSpannerInstance(String value);

        @Description("Spanner database ID")
        @Default.String("your-spanner-database")
        String getSpannerDatabase();
        void setSpannerDatabase(String value);

        @Description("BigQuery dataset name")
        @Default.String("your_bq_dataset")
        String getBigQueryDataset();
        void setBigQueryDataset(String value);

        @Description("BigQuery table name")
        @Default.String("your_bq_table")
        String getBigQueryTable();
        void setBigQueryTable(String value);
    }

    public static void main(String[] args) {
        SpannerToBigQueryOptions options = PipelineOptionsFactory.fromArgs(args)
                .withValidation()
                .as(SpannerToBigQueryOptions.class);

        Pipeline pipeline = Pipeline.create(options);

        // Read data from Spanner
        PCollection<Row> spannerData = pipeline.apply("Read from Spanner",
                SpannerIO.read()
                        .withProjectId(options.getProject())
                        .withInstanceId(options.getSpannerInstance())
                        .withDatabaseId(options.getSpannerDatabase())
                        .withQuery("SELECT UUID, cust_id, acct_num, mtn FROM cust_line_acct")
        );

        // Transform Spanner data into BigQuery TableRow format
        PCollection<TableRow> bigQueryData = spannerData.apply("Transform Data", ParDo.of(new DoFn<Row, TableRow>() {
            @ProcessElement
            public void processElement(ProcessContext c) {
                Row row = c.element();
                TableRow tableRow = new TableRow()
                        .set("UUID", row.getString("UUID"))
                        .set("cust_id", row.getString("cust_id"))
                        .set("acct_num", row.getString("acct_num"))
                        .set("mtn", row.getString("mtn"));
                c.output(tableRow);
            }
        }));

        // Write data to BigQuery
        bigQueryData.apply("Write to BigQuery",
                BigQueryIO.writeTableRows()
                        .to(options.getProject() + ":" + options.getBigQueryDataset() + "." + options.getBigQueryTable())
                        .withSchema(new TableSchema().setFields(
                                java.util.Arrays.asList(
                                        new TableFieldSchema().setName("UUID").setType("STRING"),
                                        new TableFieldSchema().setName("cust_id").setType("STRING"),
                                        new TableFieldSchema().setName("acct_num").setType("STRING"),
                                        new TableFieldSchema().setName("mtn").setType("STRING")
                                )
                        ))
                        .withWriteDisposition(BigQueryIO.Write.WriteDisposition.WRITE_APPEND)
                        .withCreateDisposition(BigQueryIO.Write.CreateDisposition.CREATE_IF_NEEDED)
        );

        // Run the pipeline
        pipeline.run().waitUntilFinish();
    }
}
