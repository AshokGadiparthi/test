import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import com.google.cloud.storage.Blob;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisSSLParams;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.Channels;
import java.security.KeyStore;

public class RedisDataflowExample {

    public static void main(String[] args) throws Exception {
        // Create and configure your Dataflow pipeline
        PipelineOptions options = PipelineOptionsFactory.create();
        Pipeline pipeline = Pipeline.create(options);

        // Replace these variables with your Redis configuration
        String redisHost = "your-redis-host";
        int redisPort = 6379;
        String redisAuth = "your-redis-auth-string";
        String bucketName = "your-bucket";
        String blobName = "config/keystore.jks";
        String jksPassword = "your-keystore-password";

        // Download JKS file from GCS to /tmp
        String jksFilePath = "/tmp/keystore.jks";
        downloadJksFile(bucketName, blobName, jksFilePath);

        // Load the JKS file
        KeyStore keyStore = KeyStore.getInstance("JKS");
        try (FileInputStream jksInputStream = new FileInputStream(jksFilePath)) {
            keyStore.load(jksInputStream, jksPassword.toCharArray());
        }

        // Configure SSL/TLS with the JKS
        JedisSSLParams sslParams = new JedisSSLParams(jksFilePath, jksFilePath, jksFilePath, jksPassword);

        // Use ParDo to connect to Redis and perform operations
        PCollection<String> data = pipeline.apply("ReadData", ...); // Replace with your data source

        data.apply("ConnectToRedis", ParDo.of(new DoFn<String, Void>() {
            @ProcessElement
            public void processElement(ProcessContext c) {
                JedisPoolConfig poolConfig = new JedisPoolConfig();
                try (Jedis jedis = new Jedis(redisHost, redisPort, sslParams)) {
                    jedis.auth(redisAuth);

                    // Example: Set and get a value in Redis
                    jedis.set("key", c.element());
                    String value = jedis.get("key");
                    System.out.println("Redis Value: " + value);
                }
            }
        }));

        // Run the pipeline
        pipeline.run().waitUntilFinish();
    }

    private static void downloadJksFile(String bucketName, String blobName, String destinationPath) throws IOException {
        Storage storage = StorageOptions.getDefaultInstance().getService();
        Blob blob = storage.get(bucketName, blobName);

        if (blob != null) {
            try (FileOutputStream fos = new FileOutputStream(destinationPath)) {
                fos.getChannel().transferFrom(Channels.newChannel(blob.reader()), 0, Long.MAX_VALUE);
            }
        } else {
            throw new IOException("Failed to download JKS file: Blob not found in GCS.");
        }
    }
}
