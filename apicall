from google.cloud import secretmanager
import json

def access_secret_version(project_id, secret_id, version_id="latest"):
    """
    Access the secret version from Google Cloud Secret Manager.

    Args:
    project_id (str): The ID of your Google Cloud project.
    secret_id (str): The ID of the secret in Secret Manager.
    version_id (str): The version of the secret to access, defaults to 'latest'.

    Returns:
    str: The secret payload.
    """
    # Create the Secret Manager client.
    client = secretmanager.SecretManagerServiceClient()

    # Build the resource name of the secret version.
    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"

    # Access the secret version.
    response = client.access_secret_version(name=name)

    # Return the decoded payload.
    return response.payload.data.decode("UTF-8")

def verify_credentials(credentials):
    """
    Verify the credentials. This function can be customized
    based on what you need to verify.

    Args:
    credentials (dict): The credentials in dictionary format.

    Returns:
    bool: True if credentials are verified, False otherwise.
    """
    # Example: Check if the credentials have a specific key.
    required_keys = ["username", "password"]
    for key in required_keys:
        if key not in credentials:
            return False

    # You can add more checks depending on your verification logic.
    return True

def main():
    project_id = "your-project-id"
    secret_id = "your-secret-id"

    try:
        # Access the secret credentials.
        secret = access_secret_version(project_id, secret_id)

        # Parse the secret as a JSON object.
        credentials = json.loads(secret)

        # Verify the credentials.
        if verify_credentials(credentials):
            print("Credentials are valid.")
        else:
            print("Credentials are invalid.")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
