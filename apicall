import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.FileIO;
import org.apache.beam.sdk.io.fs.MatchResult;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;

public class GCSJsonToRedisWithJedisPipeline {

    public static void main(String[] args) {
        // Step 1: Define Pipeline Options
        PipelineOptions options = PipelineOptionsFactory.create();
        Pipeline p = Pipeline.create(options);

        // Step 2: Use FileIO to match all .gz files and read as PCollection
        String inputPattern = "gs://your-bucket/your-path-to-gz-files/*.gz";
        PCollection<MatchResult.Metadata> matchedFiles = p.apply(FileIO.match().filepattern(inputPattern))
                                                         .apply(FileIO.readMatches());

        // Step 3: Process each file in the PCollection
        matchedFiles.apply("ProcessFiles", ParDo.of(new ProcessGzFiles()));

        // Step 4: Run the pipeline
        p.run().waitUntilFinish();
    }

    static class ProcessGzFiles extends DoFn<MatchResult.Metadata, Void> {
        @ProcessElement
        public void processElement(@Element MatchResult.Metadata metadata, OutputReceiver<Void> receiver) {
            // Your logic to process each file
            System.out.println("Processing file: " + metadata.resourceId());
            // Implement your Redis connection and processing logic here
        }
    }
}
