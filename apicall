import com.google.api.services.bigquery.model.TableRow;
import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.QueryJobConfiguration;
import com.google.cloud.bigquery.TableId;
import com.google.cloud.bigquery.TableResult;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.pubsub.PubsubIO;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.json.JSONObject;

public class SpannerToBigQueryCDC {

    public interface Options extends PipelineOptions {
        @Description("BigQuery Dataset Name")
        @Default.String("your_dataset")
        String getDataset();
        void setDataset(String dataset);

        @Description("BigQuery Table Name")
        @Default.String("dim_customer")
        String getTable();
        void setTable(String table);
    }

    public static void main(String[] args) {
        PipelineOptionsFactory.register(Options.class);
        Options options = PipelineOptionsFactory.fromArgs(args).withValidation().as(Options.class);
        Pipeline pipeline = Pipeline.create(options);

        String pubSubSubscription = "projects/your-project/subscriptions/your-subscription";
        String datasetName = options.getDataset();
        String tableName = options.getTable();
        String tableSpec = String.format("%s.%s", datasetName, tableName);

        pipeline
            .apply("ReadMessages", PubsubIO.readStrings().fromSubscription(pubSubSubscription))
            .apply("ParseMessages", ParDo.of(new ParseMessageFn()))
            .apply("ProcessCDC", ParDo.of(new ProcessCDCFn(tableSpec)));

        pipeline.run().waitUntilFinish();
    }

    static class ParseMessageFn extends DoFn<String, TableRow> {
        @ProcessElement
        public void processElement(@Element String message, OutputReceiver<TableRow> receiver) {
            JSONObject json = new JSONObject(message);
            String modType = json.getString("modType");
            JSONObject mod = json.getJSONArray("mods").getJSONObject(0);
            JSONObject newValues = new JSONObject(mod.getString("newValuesJson"));
            JSONObject keys = new JSONObject(mod.getString("keysJson"));

            TableRow row = new TableRow()
                .set("cust_id", keys.optString("cust_id", null))
                .set("acct_num", newValues.optString("acct_num", null))
                .set("COL3", newValues.optInt("COL3", -1))
                .set("COL4", newValues.optString("COL4", null))
                .set("COL5", newValues.optInt("COL5", -1))
                .set("modType", modType)
                .set("newValuesJson", newValues.toString());

            receiver.output(row);
        }
    }

    static class ProcessCDCFn extends DoFn<TableRow, Void> {
        private final String tableSpec;

        ProcessCDCFn(String tableSpec) {
            this.tableSpec = tableSpec;
        }

        @ProcessElement
        public void processElement(@Element TableRow row) {
            String modType = (String) row.get("modType");
            String custId = (String) row.get("cust_id");
            String newValuesJsonStr = (String) row.get("newValuesJson");
            JSONObject newValuesJson = new JSONObject(newValuesJsonStr);
            String query = "";

            if ("INSERT".equals(modType)) {
                query = String.format(
                    "INSERT INTO `%s` (cust_id, acct_num, COL3, COL4, COL5) " +
                    "VALUES ('%s', '%s', %d, '%s', %d)",
                    tableSpec,
                    custId,
                    row.get("acct_num"),
                    row.get("COL3"),
                    row.get("COL4"),
                    row.get("COL5")
                );
            } else if ("UPDATE".equals(modType)) {
                StringBuilder updateQueryBuilder = new StringBuilder();
                updateQueryBuilder.append(String.format("UPDATE `%s` SET ", tableSpec));

                boolean first = true;
                for (String key : newValuesJson.keySet()) {
                    if (!first) {
                        updateQueryBuilder.append(", ");
                    }
                    updateQueryBuilder.append(key).append(" = ");
                    if (newValuesJson.get(key) instanceof String) {
                        updateQueryBuilder.append("'").append(newValuesJson.getString(key)).append("'");
                    } else {
                        updateQueryBuilder.append(newValuesJson.get(key));
                    }
                    first = false;
                }
                updateQueryBuilder.append(" WHERE cust_id = '").append(custId).append("'");
                query = updateQueryBuilder.toString();
            } else if ("DELETE".equals(modType)) {
                query = String.format(
                    "DELETE FROM `%s` WHERE cust_id = '%s'",
                    tableSpec,
                    custId
                );
            }

            try {
                BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();
                QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();
                bigquery.query(queryConfig);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
