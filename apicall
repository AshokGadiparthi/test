import org.apache.beam.runners.dataflow.options.DataflowPipelineOptions;
import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.TextIO;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.MapElements;
import org.apache.beam.sdk.transforms.SimpleFunction;
import org.apache.beam.sdk.values.PCollection;
import org.apache.beam.sdk.values.TypeDescriptor;

import redis.clients.jedis.Jedis;

public class GcsToRedisPipeline {

    public interface MyPipelineOptions extends DataflowPipelineOptions {
    }

    public static void main(String[] args) {
        // Create and set up the pipeline options
        MyPipelineOptions options = PipelineOptionsFactory.fromArgs(args).withValidation().as(MyPipelineOptions.class);
        options.setRunner(DataflowRunner.class);

        // Create the Pipeline
        Pipeline p = Pipeline.create(options);

        // Define your GCS file path
        String gcsFilePath = "gs://your-bucket/path/to/your/file.csv";

        // Read data from GCS
        PCollection<String> lines = p.apply("ReadFromGCS", TextIO.read().from(gcsFilePath));

        // Transform data and write to Redis
        PCollection<String> redisData = lines.apply("TransformToRedisFormat", MapElements
                .into(TypeDescriptor.of(String.class))
                .via((String line) -> {
                    // Assuming CSV format: emp_no,emp_name,address,phone_number
                    String[] fields = line.split(",");
                    if (fields.length == 4) {
                        String empNo = fields[0];
                        String empName = fields[1];
                        String address = fields[2];
                        String phoneNumber = fields[3];

                        // Create a Redis key-value pair
                        return String.format("employee:%s,%s,%s,%s", empNo, empName, address, phoneNumber);
                    }
                    return null;
                }));

        redisData.apply("WriteToRedis", ParDo.of(new DoFn<String, Void>() {
            @ProcessElement
            public void processElement(ProcessContext c) {
                String redisData = c.element();
                if (redisData != null) {
                    try (Jedis jedis = new Jedis("redis-instance-ip", 6379)) {
                        String[] parts = redisData.split(",", 2);
                        if (parts.length == 2) {
                            jedis.set(parts[0], parts[1]);
                        }
                    }
                }
            }
        }));

        // Run the pipeline
        p.run().waitUntilFinish();
    }
}
