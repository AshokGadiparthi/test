-- Step 1: Compute hash and get mismatched row keys
CREATE OR REPLACE TABLE `project.dataset.dq_mismatch_rows` AS
SELECT
  t.cust_id,
  t.acct_num,
  t.mtn,
  t.hash_col AS hash_t,
  s.hash_col AS hash_s,
  t.col1, t.col2, t.col3, t.col4, t.col5, -- add all source columns
  s.col1 AS s_col1, s.col2 AS s_col2, s.col3 AS s_col3, s.col4 AS s_col4, s.col5 AS s_col5 -- add all target columns
FROM `project.dataset.Table_T` t
JOIN `project.dataset.Table_S` s
  USING (cust_id, acct_num, mtn)
WHERE t.hash_col <> s.hash_col;

-- Step 2: Unpivot columns using UNION ALL
CREATE OR REPLACE TABLE `project.dataset.dq_unpivoted` AS
SELECT cust_id, acct_num, mtn, 'col1' AS col_name, col1 AS t_value, s_col1 AS s_value FROM `project.dataset.dq_mismatch_rows`
UNION ALL
SELECT cust_id, acct_num, mtn, 'col2', col2, s_col2 FROM `project.dataset.dq_mismatch_rows`
UNION ALL
SELECT cust_id, acct_num, mtn, 'col3', col3, s_col3 FROM `project.dataset.dq_mismatch_rows`
UNION ALL
SELECT cust_id, acct_num, mtn, 'col4', col4, s_col4 FROM `project.dataset.dq_mismatch_rows`
UNION ALL
SELECT cust_id, acct_num, mtn, 'col5', col5, s_col5 FROM `project.dataset.dq_mismatch_rows`
-- continue for all columns...

-- Step 3: Aggregate mismatch metrics per column
CREATE OR REPLACE TABLE `project.dataset.dq_column_summary` AS
SELECT
  col_name,
  COUNTIF(t_value IS NULL) AS source_null_count,
  COUNTIF(s_value IS NULL) AS target_null_count,
  COUNTIF(t_value <> s_value OR (t_value IS NULL AND s_value IS NOT NULL) OR (t_value IS NOT NULL AND s_value IS NULL)) AS mismatch_count,
  ARRAY_AGG(STRUCT(cust_id, acct_num, mtn, t_value, s_value) LIMIT 10) AS mismatch_sample
FROM `project.dataset.dq_unpivoted`
GROUP BY col_name
ORDER BY mismatch_count DESC;
