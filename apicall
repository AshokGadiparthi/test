import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.Job;
import com.google.cloud.bigquery.JobId;
import com.google.cloud.bigquery.JobInfo;
import com.google.cloud.bigquery.QueryJobConfiguration;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.values.PCollection;
import org.apache.beam.sdk.values.KV;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class BatchDmlFn extends DoFn<String, Void> {

    private static final int MAX_CONCURRENT_DML = 2;
    private static final int BATCH_SIZE = 20;

    private transient BigQuery bigquery;
    private List<String> batch = new ArrayList<>();

    @Setup
    public void setup() {
        bigquery = BigQueryOptions.getDefaultInstance().getService();
    }

    @ProcessElement
    public void processElement(ProcessContext c) {
        batch.add(c.element());

        // If batch is full, process it
        if (batch.size() >= BATCH_SIZE) {
            executeBatch(new ArrayList<>(batch));
            batch.clear();
        }
    }

    @FinishBundle
    public void finishBundle(FinishBundleContext c) {
        // Process any remaining queries that didn't make up a full batch
        if (!batch.isEmpty()) {
            executeBatch(new ArrayList<>(batch));
            batch.clear();
        }
    }

    private void executeBatch(List<String> queries) {
        ExecutorService executor = Executors.newFixedThreadPool(MAX_CONCURRENT_DML);
        List<Future<Void>> futures = new ArrayList<>();

        for (List<String> subBatch : partition(queries, BATCH_SIZE)) {
            Runnable task = () -> {
                try {
                    for (String dmlQuery : subBatch) {
                        JobId jobId = JobId.of("your_job_id");
                        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(dmlQuery).build();
                        Job job = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());
                        job = job.waitFor(); // Wait for the job to complete
                        if (job.hasErrors()) {
                            // Handle errors
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            };
            futures.add(executor.submit(task));
        }

        // Wait for all tasks to complete
        for (Future<Void> future : futures) {
            try {
                future.get();
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }
        executor.shutdown();
    }

    private <T> List<List<T>> partition(List<T> list, int size) {
        List<List<T>> partitions = new ArrayList<>();
        for (int i = 0; i < list.size(); i += size) {
            partitions.add(list.subList(i, Math.min(i + size, list.size())));
        }
        return partitions;
    }
}
