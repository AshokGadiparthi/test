// ✅ Step 1: Map each TransactionMessage to a KV pair
PCollection<KV<String, TransactionMessage>> keyedMessages = insert_transaction_message.apply(
    "MapToKV",
    MapElements.into(TypeDescriptors.kvs(TypeDescriptors.strings(), TypeDescriptor.of(TransactionMessage.class)))
        .via(msg -> KV.of(msg.getTableName() + "_" + msg.getCustId(), msg))
);

// ✅ Step 2: Group by Key
PCollection<KV<String, Iterable<TransactionMessage>>> groupedMessages = keyedMessages.apply(
    "GroupByKey",
    GroupByKey.create()
);

// ✅ Step 3: Convert Iterable to List (to match expected format)
PCollection<KV<String, List<TransactionMessage>>> formattedMessages = groupedMessages.apply(
    "ConvertToList",
    ParDo.of(new DoFn<KV<String, Iterable<TransactionMessage>>, KV<String, List<TransactionMessage>>>() {
        @ProcessElement
        public void processElement(ProcessContext c) {
            KV<String, Iterable<TransactionMessage>> element = c.element();
            List<TransactionMessage> messageList = new ArrayList<>();
            element.getValue().forEach(messageList::add);
            c.output(KV.of(element.getKey(), messageList));
        }
    })
);

// ✅ Step 4: Now pass `formattedMessages` to your ParDo
formattedMessages.apply(
    "ProcessMessages",
    ParDo.of(new YourNextProcessingFn())  // Replace with your actual processing function
);
