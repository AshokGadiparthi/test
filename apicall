import org.apache.beam.sdk.Pipeline;
import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO;
import org.apache.beam.sdk.options.PipelineOptions;
import org.apache.beam.sdk.options.PipelineOptionsFactory;
import org.apache.beam.sdk.transforms.DoFn;
import org.apache.beam.sdk.transforms.ParDo;
import org.apache.beam.sdk.values.PCollection;
import redis.clients.jedis.Jedis;
import com.google.api.services.bigquery.model.TableRow;

public class OptimizedSyncBigQueryToRedis {

    private static final String REDIS_HOST = "your-redis-host"; // Replace with actual Redis host
    private static final int REDIS_PORT = 6379;

    /**
     * Step 1: Update Redis - Set `ref_col` as Key with "Y" as Value
     */
    static class UpdateRedisFn extends DoFn<TableRow, Void> {
        private transient Jedis jedis;

        @Setup
        public void setup() {
            jedis = new Jedis(REDIS_HOST, REDIS_PORT);
        }

        @ProcessElement
        public void processElement(ProcessContext c) {
            String refColValue = (String) c.element().get("ref_col");

            if (refColValue != null) {
                jedis.set(refColValue, "Y");  // Store in Redis as Key-Value (ref_col -> "Y")
                System.out.println("✅ Updated Redis: " + refColValue);
            }
        }

        @Teardown
        public void teardown() {
            jedis.close();
        }
    }

    /**
     * Step 2: Remove Outdated Entries from Redis (Keys Not in BigQuery)
     */
    static class RemoveOutdatedRedisFn extends DoFn<TableRow, Void> {
        private transient Jedis jedis;

        @Setup
        public void setup() {
            jedis = new Jedis(REDIS_HOST, REDIS_PORT);
        }

        @ProcessElement
        public void processElement(ProcessContext c) {
            String refColValue = (String) c.element().get("ref_col");

            // If Redis Key exists but NOT in BigQuery, remove it
            if (refColValue != null && jedis.exists(refColValue)) {
                jedis.del(refColValue);
                System.out.println("❌ Removed from Redis: " + refColValue);
            }
        }

        @Teardown
        public void teardown() {
            jedis.close();
        }
    }

    public static void main(String[] args) {
        PipelineOptions options = PipelineOptionsFactory.fromArgs(args).withValidation().create();
        Pipeline pipeline = Pipeline.create(options);

        // Step 1: Read latest BigQuery `ref_col` values
        PCollection<TableRow> bigQueryData = pipeline.apply("ReadFromBigQuery",
                BigQueryIO.readTableRows().from("your_project.your_dataset.employee"));

        // Step 2: Update Redis with new/updated values
        bigQueryData.apply("UpdateRedis", ParDo.of(new UpdateRedisFn()));

        // Step 3: Remove outdated entries from Redis
        bigQueryData.apply("RemoveOldFromRedis", ParDo.of(new RemoveOutdatedRedisFn()));

        pipeline.run().waitUntilFinish();
    }
}
