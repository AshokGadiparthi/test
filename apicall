import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.Pipeline;

import java.util.Map;

public class GCSJsonToRedisWithPipelining {

    private static final int BATCH_SIZE = 500; // Max number of operations per pipeline

    public static void main(String[] args) {
        // Step 1: Set up the JedisPool
        JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMaxTotal(10);  // Limit max total connections
        poolConfig.setMaxIdle(5);    // Limit max idle connections
        poolConfig.setMinIdle(1);    // Keep at least 1 connection idle

        String redisHost = "your-redis-host";
        int redisPort = 6379;
        String redisAuth = "your-redis-auth-string";
        JedisPool jedisPool = new JedisPool(poolConfig, redisHost, redisPort, 2000, redisAuth);

        try (Jedis jedis = jedisPool.getResource()) {
            Pipeline pipeline = jedis.pipelined();

            int count = 0;
            for (String jsonLine : jsonLines) {
                Map<String, String> jsonMap = new Gson().fromJson(jsonLine, Map.class);
                String key = String.format("%s:%s:%s", jsonMap.get("cust_id"), jsonMap.get("acct_num"), jsonMap.get("mtn"));

                // Add commands to the pipeline
                pipeline.hset(key, "cust_line_seq_id", jsonMap.get("cust_line_seq_id"));
                pipeline.hset(key, "crm_cust_line_hash", jsonMap.get("crm_cust_line_hash"));
                pipeline.hset(key, "omni_cust_hash", jsonMap.get("omni_cust_hash"));
                pipeline.hset(key, "moni_mtn_hash", jsonMap.get("moni_mtn_hash"));
                pipeline.hset(key, "process_dt", jsonMap.get("process_dt"));

                count++;

                // Execute and clear pipeline if it reaches the batch size
                if (count >= BATCH_SIZE) {
                    pipeline.sync();
                    count = 0;
                }
            }

            // Execute any remaining commands in the pipeline
            if (count > 0) {
                pipeline.sync();
            }
        } finally {
            if (jedisPool != null) {
                jedisPool.close();
            }
        }
    }
}
