import com.google.cloud.pubsub.v1.Publisher;
import com.google.pubsub.v1.PubsubMessage;
import com.google.pubsub.v1.TopicName;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.protobuf.ByteString;

import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;

public class PubSubInsertQueryPublisher {

    private static final String PROJECT_ID = "your-project-id";
    private static final String TOPIC_ID = "your-topic-id";
    private static final int NUM_THREADS = 10; // Number of threads
    private static final int TOTAL_MESSAGES = 1000000; // 1 million messages
    private static final int TIME_LIMIT_MINUTES = 30;

    public static void main(String[] args) throws Exception {
        TopicName topicName = TopicName.of(PROJECT_ID, TOPIC_ID);
        Publisher publisher = Publisher.newBuilder(topicName).build();

        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);
        AtomicLong sequenceNumber = new AtomicLong(1); // Atomic counter for unique sequence numbers
        Random random = new Random(); // Random object for generating random strings

        // Define the total number of messages per thread
        int messagesPerThread = TOTAL_MESSAGES / NUM_THREADS;

        // Submit tasks to generate and publish messages in parallel
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.submit(() -> {
                List<ApiFuture<String>> futures = new ArrayList<>();
                for (int j = 0; j < messagesPerThread; j++) {
                    long seqNum = sequenceNumber.getAndIncrement(); // Get unique sequence number

                    // Generate random values for acct_num, selected_MTN, mtn, order_num
                    String acctNum = getRandomString(random);
                    String selectedMTN = getRandomString(random);
                    String mtn = getRandomString(random);
                    String orderNum = getRandomString(random);

                    // Generate the INSERT SQL query
                    String sqlInsertQuery = String.format(
                        "INSERT INTO SpannerToPubsubCDC (cust_id, acct_num, selected_MTN, mtn, order_num) " +
                        "VALUES ('%d', '%s', '%s', '%s', '%s');",
                        seqNum, acctNum, selectedMTN, mtn, orderNum);

                    // Create Pub/Sub message
                    PubsubMessage message = PubsubMessage.newBuilder()
                            .setData(ByteString.copyFromUtf8(sqlInsertQuery))
                            .build();

                    // Publish the message to Pub/Sub
                    ApiFuture<String> messageIdFuture = publisher.publish(message);
                    futures.add(messageIdFuture);
                }

                // Wait for all messages in this thread to be sent
                ApiFutures.allAsList(futures).get();
            });
        }

        // Shutdown the executor after tasks are submitted
        executor.shutdown();

        // Wait for all tasks to complete within the time limit
        if (!executor.awaitTermination(TIME_LIMIT_MINUTES, TimeUnit.MINUTES)) {
            System.out.println("Not all tasks completed within the time limit.");
            executor.shutdownNow();
        }

        // Shutdown the Pub/Sub publisher
        publisher.shutdown();
        publisher.awaitTermination(1, TimeUnit.MINUTES);

        System.out.println("Successfully published 1 million SQL insert messages to Pub/Sub.");
    }

    // Helper method to generate a random string of a given length
    private static String getRandomString(Random random) {
        int length = 6; // Define length of the random string
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"; // Characters to choose from
        StringBuilder sb = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            sb.append(characters.charAt(index));
        }

        return sb.toString(); // Return the random string
    }
}
